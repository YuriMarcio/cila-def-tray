"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileIsAllowed = void 0;
const path_1 = require("path");
const FileExtensionNotAllowedError_1 = require("../errors/FileExtensionNotAllowedError");
const FolderNotAllowedError_1 = require("../errors/FolderNotAllowedError");
const SubfolderNotAllowedError_1 = require("../errors/SubfolderNotAllowedError");
/**
 * Verify is extension is allowed.
 * @param {string} extension File extension
 * @return {promise} True if promises resolves, ApiError otherwise.
 * @internal
 */
function isExtensionValid(extension) {
    const allowedEextensions = [
        /* Fonts extensions */
        '.ttf',
        '.otf',
        '.eot',
        '.woff',
        '.woff2',
        /* Imagens extensions */
        '.jpg',
        '.jpeg',
        '.gif',
        '.png',
        '.svg',
        /* Styles extensions */
        '.css',
        '.scss',
        /* Other extensions */
        '.html',
        '.js',
        '.json',
    ];
    return new Promise((resolve, reject) => {
        allowedEextensions.includes(extension)
            ? resolve(true)
            : reject(new FileExtensionNotAllowedError_1.FileExtensionNotAllowedError(allowedEextensions.join(', ')));
    });
}
/**
 * Verify folder is allowed.
 * @param {string} directories Folders path
 * @return {promise} True if promises resolves, ApiError otherwise.
 * @internal
 */
function isFolderValid(directories) {
    const allowedFolders = ['configs', 'css', 'elements', 'img', 'js', 'layouts', 'pages'];
    const rootFolder = directories.substring(2).split('/')[0];
    return new Promise((resolve, reject) => {
        allowedFolders.includes(rootFolder)
            ? resolve(true)
            : reject(new FolderNotAllowedError_1.FolderNotAllowedError(allowedFolders.join(', ')));
    });
}
/**
 * Verify path allow subfolders
 * @param {string} directories Folders path
 * @return {promise} True if promises resolves, ApiError otherwise.
 * @internal
 */
function isSubfoldersAllowed(directories) {
    const allowedSubolders = ['css', 'elements', 'img', 'js'];
    const folders = directories.substring(2).split('/');
    const rootFolder = folders[0];
    return new Promise((resolve, reject) => {
        folders.length > 1 && !allowedSubolders.includes(rootFolder)
            ? reject(new SubfolderNotAllowedError_1.SubfolderNotAllowedError(allowedSubolders.join(', ')))
            : resolve(true);
    });
}
/**
 * Verify file is allowed in theme structure.
 * Validades file extension, root folders and subfolders.
 * @param {string} path Complete file path
 * @return {promise} True if promises resolves, ApiError otherwise.
 */
function fileIsAllowed(path) {
    const { ext: extension, dir: directories } = (0, path_1.parse)(path);
    return isExtensionValid(extension)
        .then((data) => isFolderValid(directories))
        .then((data) => isSubfoldersAllowed(directories));
}
exports.fileIsAllowed = fileIsAllowed;
