import { AxiosRequestHeaders } from 'axios';
import { ApiAssetContentResponse } from './responses/ApiAssetContentResponse';
import { ApiAssetsResponse } from './responses/ApiAssetsResponse';
import { ApiConfigurationResponse } from './responses/ApiConfigurationResponse';
import { ApiCreateThemeResponse } from './responses/ApiCreateThemeResponse';
import { ApiListThemesResponse } from './responses/ApiListThemesResponse';
import { Config } from './types/Config';
import { SendAsset } from './types/SendAsset';
/**
 * Opencode api main class
 */
export declare class Api {
    readonly debugFilePath: string;
    readonly version: string;
    readonly url: string;
    readonly debug: boolean;
    readonly key: string;
    readonly password: string;
    readonly themeId?: number;
    readonly headers: AxiosRequestHeaders;
    /**
     * Initiate API class instance
     */
    constructor({ key, password, themeId, debug }: Config);
    /**
     * Verify response error to detect Authentication error from API
     * @param {AxiosError} error Response error from Axios
     * @return {AuthenticationError | boolean} Returns AuthenticationError instance in case of Authentication error, false otherwise.
     */
    private verifyAuthenticationError;
    /**
     * Adds operation info log to file with debug enabled
     * @param {string} type Type of message. Allowed: Emergency, Alert, Critical, Error, Warning, Notice Info or Debug
     * @param {string} operation Operation where debug info was generated
     * @param {Object|string} data Data from operation
     * @private
     */
    private generateDebugFile;
    /**
     * Check configurations files
     * @returns Promise to be resolved. ApiConfigurationResponse if resolved. ApiError otherwise.
     */
    checkConfiguration(): Promise<ApiConfigurationResponse>;
    /**
     * Clean cache for a theme on store
     * @param {number|null} themeId Theme id to clean cache.
     * @returns Promise Return true with promises resolve, or ApiError otherwise.
     */
    cleanCache(themeId?: number | undefined): Promise<boolean>;
    /**
     * Get a list of all themes available at store
     * @returns Promise ApiListThemesResponse if promise resolves, or ApiError otherwise.
     */
    getThemes(): Promise<ApiListThemesResponse>;
    /**
     * Create a new theme on store.
     * @param name Name of the new theme
     * @param base Name of the base theme
     * @returns Promise ApiCreateThemeResponse if promise resolves, or ApiError otherwise.
     */
    createTheme(name: string, base?: string): Promise<ApiCreateThemeResponse>;
    /**
     * Delete a theme from store
     * @param id Theme id to delete
     * @returns Promise Return true with promises resolve, or ApiError otherwise.
     */
    deleteTheme(id: number): Promise<boolean>;
    /**
     * Get theme assets
     * @returns Promise Return assets and total quantity if promise resolves, or ApiError otherwise.
     */
    getAssets(): Promise<ApiAssetsResponse>;
    /**
     * Get specific theme asset
     * @returns Promise Return asset data if promise resolves, or ApiError otherwise.
     */
    getAsset(asset: string): Promise<ApiAssetContentResponse>;
    /**
     * Send an asset to theme
     * @param {string} asset Asset name like path
     * @param {Buffer} data Asset content
     * @param {boolean} isBinary True if content is binary, false otherwise.
     * @return Promise Return true if promise resolves, or ApiError otherwise.
     */
    sendAsset({ asset, data, isBinary }: SendAsset): Promise<boolean>;
    /**
     * Delete asset requested
     * @param {string} asset Asset name to be deleted.
     * @return Promise Return true if promise resolves, or ApiError otherwise.
     */
    deleteAsset(asset: string): Promise<boolean>;
}
